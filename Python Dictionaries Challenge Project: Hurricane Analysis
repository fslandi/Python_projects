# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# write your update damages function here:

def converter(x):
  answer = []
  for num in x:
    if "M" in num:
      answer.append(float(num[:-1]) * 1000000)
    elif "B" in num:
      answer.append(float(num[:-1]) * 1000000000)
    else:
      answer.append(num)
    
  return answer
updated_damages = converter(damages)
print(type(updated_damages[1]))


# write your construct hurricane dictionary function here:

def dicta(names,months,years,max_sustained_winds,areas_affected,updated_damages,deaths):
  zipped = {}
  for x in range(0,len(names)):
    zipped[names[x]] = {'Name': names[x], 'Month': months[x], 'Year':years[x], 'Max Sustained Wind': max_sustained_winds[x], 'Areas Affected': areas_affected[x], 'Damage': updated_damages[x], 'Death':deaths[x]}
  return zipped
hurricanes = dicta(names,months,years,max_sustained_winds,areas_affected,updated_damages,deaths)
# write your construct hurricane by year dictionary function here:
def converter_to_years(m):
  j= {}
  for x in m.keys():
    j[m[x]["Year"]] = m[x]
  return j


# write your count affected areas function here:
def count(hurricanes):
  list_of_areas = []
  count_list = {}
  max_count=0
  for name in hurricanes.keys():
    for area in hurricanes[name]['Areas Affected']:
      if area in count_list.keys():
        count_list[area] += 1
        if count_list[area] > max_count:
          max_count = count_list[area]
          max_area = area
      else:
        count_list[area]  = 1


  return count_list,max_area,max_count


# write your greatest number of deaths function here:

def deaths_count(hurricanes):
  total_deaths =0
  for name in hurricanes.keys():
    if hurricanes[name]['Death'] > total_deaths:
      total_deaths = hurricanes[name]['Death']
      death_name = name 


  return death_name, total_deaths

# write your catgeorize by mortality function here:
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
hurricane_rate = {0:[],1:[],2:[],3:[],4:[],5:[]}
def rate_match(hurricanes):
  for name in hurricanes.keys():
      if hurricanes[name]['Death'] < 100:
        hurricane_rate[0].append(hurricanes[name]['Name'])
        
  return hurricane_rate


# write your greatest damage function here:

def damage(hurricanes):
  max_damage= 0
  max_name = ''
  for name in hurricanes.keys():
    if type(hurricanes[name]['Damage'])==float and hurricanes[name]['Damage']>max_damage:
      max_damage = hurricanes[name]['Damage']
      max_name = name
  return max_damage, max_name
print(damage(hurricanes))

# write your catgeorize by damage function here:

hurricane_rate_damage = {0:[],1:[],2:[],3:[],4:[],5:[]}
def rate_damage(hurricanes):
  for name in hurricanes.keys():
    if (type(hurricanes[name]['Damage']) == str) or ( 0 == hurricanes[name]['Damage']):
        hurricane_rate_damage[0].append(hurricanes[name]['Name'])
    elif 0 < hurricanes[name]['Damage'] <= 100000000:
        hurricane_rate_damage[1].append(hurricanes[name]['Name'])
    elif 100000000 < hurricanes[name]['Damage'] <= 1000000000:
        hurricane_rate_damage[2].append(hurricanes[name]['Name'])
    elif 1000000000 < hurricanes[name]['Damage'] < 10000000000:
        hurricane_rate_damage[3].append(hurricanes[name]['Name'])
    elif 10000000000 < hurricanes[name]['Damage'] <50000000000:
        hurricane_rate_damage[4].append(hurricanes[name]['Name'])
    else:
        hurricane_rate_damage[5].append(hurricanes[name]['Name'])
      
  return hurricane_rate_damage

print(rate_damage(hurricanes))



